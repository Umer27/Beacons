import {
  Body,
  ClassSerializerInterceptor,
  Controller,
  Post,
  UseGuards,
  UseInterceptors,
} from '@nestjs/common';
import {
  ApiBearerAuth,
  ApiCreatedResponse,
  ApiOkResponse,
  ApiOperation,
  ApiTags,
} from '@nestjs/swagger';

import { AuthGuard } from './auth.guard';
import { AuthService } from './auth.service';
import { ForgetPasswordRequestDto } from './dtos/request/forget-password.dto';
import { PatientSignupRequestDto } from './dtos/request/patient-signup.dto';
import { SendOtpRequestDto } from './dtos/request/send-otp.dto';
import { SigninRequestDto } from './dtos/request/signin.dto';
import { StaffSignupRequestDto } from './dtos/request/staff-signup.dto';
import { VerifyOtpRequestDto } from './dtos/request/verify-otp.dto';
import { PatientSignupResponseDto } from './dtos/response/patient-signup.dto';
import { SigninResponseDto } from './dtos/response/signin.dto';
import { StaffSignupResponseDto } from './dtos/response/staff-signup.dto';

@ApiTags('Auth')
@Controller('auth')
@UseInterceptors(ClassSerializerInterceptor)
export class AuthController {
  constructor(private readonly authService: AuthService) {}
  @Post('/signin')
  @ApiOperation({
    description: `# Sign in flow
   To signin a user use \`/auth/signin\` API. This API will return the user that is signined in and token. This token has some metadata
   encryted inside it.
   Use this token to login on firebase using \`signinUsingCustomToken\` method and pass that token. Firebase will return an id token.
   This id token will be sent in request headers for OTP. The key for the header will be \`authorization\` and the value will be the id token
   generated by firebase. This token will have updated information encrypted and now user will be able to access more features`,
  })
  @ApiCreatedResponse({ description: 'Signin response', type: SigninResponseDto })
  signIn(@Body() body: SigninRequestDto): Promise<SigninResponseDto> {
    return this.authService.signIn(body);
  }

  @Post('/signup/staff')
  @ApiOperation({
    description: `# Signup Flow
   To create a staff user use \`/auth/signup/staff\` API. This API will return a created user and token. This token has some metadata
   encryted inside it.
   Use this token to login on firebase using \`signinUsingCustomToken\` method and pass that token. Firebase will return an id token.
   This id token will be sent in request headers for OTP. The key for the header will be \`authorization\` and the value will be the id token
   generated by firebase.
   After signup and \`signinUsingCustomToken\`, use \`/auth/otp\` API to send otp to user's device
   When user enters otp then use \`/auth/otp/verify\` API to verify the otp. In this API a new token will be generated. Use that token to
   \`signinUsingCustomToken\` as this token will have updated information encrypted and now user will be able to access more features
  `,
  })
  @ApiCreatedResponse({ description: 'Staff signup response', type: StaffSignupResponseDto })
  staffSignUp(@Body() body: StaffSignupRequestDto): Promise<StaffSignupResponseDto> {
    return this.authService.staffSignUp(body);
  }

  @Post('/signup/patient')
  @ApiCreatedResponse({ description: 'Patient signup response', type: PatientSignupResponseDto })
  patientSignUp(@Body() body: PatientSignupRequestDto): Promise<PatientSignupResponseDto> {
    return this.authService.patientSignUp(body);
  }

  @Post('/otp')
  @UseGuards(AuthGuard)
  @ApiBearerAuth()
  @ApiCreatedResponse({ description: 'OTP sent' })
  sendOtp(@Body() body: SendOtpRequestDto) {
    return this.authService.sendOtp(body);
  }

  @Post('otp/verify')
  @UseGuards(AuthGuard)
  @ApiBearerAuth()
  @ApiCreatedResponse({ description: 'OTP verified response' })
  verifyOtp(@Body() body: VerifyOtpRequestDto) {
    return this.authService.verifyOtp(body);
  }

  @Post('forgot-password')
  @ApiOkResponse({ description: 'Forgot password email sent' })
  forgotPassword(@Body() body: ForgetPasswordRequestDto) {
    return this.authService.forgotPassword(body);
  }
}
